// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "movie-booking-app/users-service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *Service) CreateUser(_a0 context.Context, _a1 models.User) (models.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *Service) GetUser(_a0 context.Context, _a1 int) (models.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0, _a1
func (_m *Service) LoginUser(_a0 context.Context, _a1 models.LoginUserRequest) (models.LoginUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginUserRequest) (models.LoginUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginUserRequest) models.LoginUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.LoginUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.LoginUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
